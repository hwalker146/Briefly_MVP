// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String?
  image             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  sessions          Session[]
  subscriptions     Subscription[]
  summaries         Summary[]
  prompts           Prompt[]
  emailPreference   EmailPreference?
  plan              Plan               @default(FREE)

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model FeedSource {
  id            String         @id @default(cuid())
  url           String         @unique
  title         String?
  description   String?
  siteUrl       String?
  lastFetched   DateTime?
  etag          String?
  lastModified  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  articles      Article[]
  subscriptions Subscription[]

  @@map("feed_sources")
}

model Subscription {
  id         String     @id @default(cuid())
  userId     String
  feedId     String
  isActive   Boolean    @default(true)
  promptId   String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  feed       FeedSource @relation(fields: [feedId], references: [id], onDelete: Cascade)
  prompt     Prompt?    @relation(fields: [promptId], references: [id])

  @@unique([userId, feedId])
  @@map("subscriptions")
}

model Article {
  id          String      @id @default(cuid())
  feedId      String
  title       String
  description String?     @db.Text
  fullText    String?     @db.Text
  url         String
  guid        String
  publishedAt DateTime
  createdAt   DateTime    @default(now())
  
  feed        FeedSource  @relation(fields: [feedId], references: [id], onDelete: Cascade)
  summaries   Summary[]

  @@unique([feedId, guid])
  @@map("articles")
}

model Summary {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  content   String   @db.Text
  promptId  String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  prompt    Prompt?  @relation(fields: [promptId], references: [id])

  @@unique([userId, articleId])
  @@map("summaries")
}

model Prompt {
  id            String         @id @default(cuid())
  userId        String
  title         String
  content       String         @db.Text
  isGlobal      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  summaries     Summary[]

  @@map("prompts")
}

model EmailPreference {
  id       String   @id @default(cuid())
  userId   String   @unique
  sendTime DateTime // Exact time in UTC when user wants to receive digest
  timezone String   // User's timezone for display purposes
  isActive Boolean  @default(true)
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_preferences")
}

enum Plan {
  FREE
  PRO
}